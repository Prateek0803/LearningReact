{"version":3,"sources":["components/movie.js","components/movieListContext.js","components/movieList.js","components/Nav.js","components/addMovies.js","App.js","serviceWorker.js","index.js"],"names":["Movie","name","prices","MovieContext","createContext","MovieProvider","props","useState","price","id","movies","setMovies","Provider","value","children","MovieList","useContext","style","fontFamily","textAlign","map","movie","key","Nav","backgroundColor","color","padding","display","justifyContent","length","AddMovies","setName","setPrice","onSubmit","e","preventDefault","preMovies","type","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2MAWeA,EATD,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,OACjB,OACI,6BACI,4BAAKD,GACL,2BAAIC,KCJHC,EAAeC,0BAEfC,EAAgB,SAACC,GAAS,IAAD,EACRC,mBAAS,CAC/B,CACIN,KAAK,eACLO,MAAM,UACNC,GAAG,GAEP,CACIR,KAAK,4BACLO,MAAM,UACNC,GAAG,GAEP,CACIR,KAAK,gBACLO,MAAM,UACNC,GAAG,KAfuB,mBAC5BC,EAD4B,KACrBC,EADqB,KAkBlC,OACI,6BACI,kBAACR,EAAaS,SAAd,CAAuBC,MAAO,CAACH,EAAOC,IACjCL,EAAMQ,YCLRC,EAhBG,WAAK,IAAD,EACOC,qBAAWb,GADlB,mBACbO,EADa,UAOlB,OACI,yBAAKO,MANK,CACVC,WAAW,QACXC,UAAU,WAKNT,EAAOU,KAAI,SAAAC,GAAK,OACb,kBAAC,EAAD,CAAOpB,KAAMoB,EAAMpB,KAAMC,OAAQmB,EAAMb,MAAOc,IAAKD,EAAMZ,UCQzDc,EAlBH,WAAK,IAAD,EACeP,qBAAWb,GAD1B,mBACLO,EADK,UAUZ,OACI,yBAAKO,MATO,CACZO,gBAAgB,MAChBC,MAAM,QACNC,QAAQ,OACRC,QAAQ,OACRC,eAAe,iBAKX,qCACR,+CAAqBlB,EAAOmB,U,OCsBjBC,EApCG,WAAK,IAAD,EACKvB,mBAAS,IADd,mBACXN,EADW,KACN8B,EADM,OAEOxB,mBAAS,IAFhB,mBAEXC,EAFW,KAELwB,EAFK,OAGQhB,qBAAWb,GAHnB,mBAGLQ,GAHK,WAwBlB,OACI,yBAAKM,MANO,CACZE,UAAU,SACVO,QAAQ,SAKJ,0BAAMO,SAZG,SAAAC,GACbA,EAAEC,iBACFxB,GAAU,SAAAyB,GAAS,4BAAQA,GAAR,CAAkB,CAACnC,KAAKA,EAAKO,MAAMA,UAW9C,2BAAO6B,KAAK,OAAOpC,KAAK,OAAOY,MAAOZ,EAAMqC,SArBrC,SAAAJ,GACfH,EAAQG,EAAEK,OAAO1B,UAqBT,2BAAOwB,KAAK,OAAOpC,KAAK,QAAQY,MAAOL,EAAO8B,SAlBtC,SAAAJ,GAChBF,EAASE,EAAEK,OAAO1B,UAkBV,6C,MCbD2B,MAZf,WACE,OACE,kBAAC,EAAD,KACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCDYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.78ac828a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Movie = ({name,prices})=>{\r\n    return(\r\n        <div>\r\n            <h3>{name}</h3>\r\n            <p>{prices}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Movie;","import React, {useState, createContext } from 'react'\r\n\r\nexport const MovieContext = createContext();\r\n\r\nexport const MovieProvider = (props)=>{\r\n    const[movies,setMovies] = useState([\r\n        {\r\n            name:'Harry Potter',\r\n            price:'150 INR',\r\n            id:1\r\n        },\r\n        {\r\n            name:'MS Dhoni The untold Story',\r\n            price:'500 INR',\r\n            id:2\r\n        },\r\n        {\r\n            name:'KGF Chapter-1',\r\n            price:'300 INR',\r\n            id:3\r\n        }\r\n    ]);\r\n    return(\r\n        <div>\r\n            <MovieContext.Provider value={[movies,setMovies]}>\r\n                {props.children}\r\n            </MovieContext.Provider>\r\n        </div>\r\n    )\r\n}","import React, { useState, useContext } from 'react'\r\nimport Movie from './movie'\r\nimport { MovieContext } from './movieListContext'\r\n\r\nconst MovieList = ()=>{\r\n  const [movies,setMovies] = useContext(MovieContext)\r\n    const myStyle={\r\n        fontFamily:'Arial',\r\n        textAlign:'center'\r\n    }\r\n\r\n    return(\r\n        <div style={myStyle}>\r\n           {movies.map(movie=>(\r\n               <Movie name={movie.name} prices={movie.price} key={movie.id}/>\r\n           ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MovieList;\r\n\r\n\r\n\r\n","import React, { useContext } from 'react'\r\nimport {MovieContext} from './movieListContext'\r\nimport Movie from './movie'\r\n\r\nconst Nav = ()=>{\r\n    const [movies,setMovies] = useContext(MovieContext)\r\n    const myStyle = {\r\n        backgroundColor:'red',\r\n        color:'white',\r\n        padding:'10px',\r\n        display:'flex',\r\n        justifyContent:'space-around',\r\n    }\r\n\r\n    return(\r\n        <div style={myStyle}> \r\n            <h3>RusN-</h3>\r\n    <h3>List of movies: {movies.length}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React, { useState, useContext } from 'react'\r\nimport {MovieContext} from './movieListContext'\r\n\r\nconst AddMovies = ()=>{\r\n    const [name,setName] = useState('');\r\n    const [price,setPrice] = useState('');\r\n    const[movies,setMovies] = useContext(MovieContext)\r\n\r\n\r\n    const updateName = e =>{\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const updatePrice = e =>{\r\n        setPrice(e.target.value);\r\n    }\r\n\r\n    const addMovie = e =>{\r\n        e.preventDefault();\r\n        setMovies(preMovies => [...preMovies,{name:name,price:price}])\r\n    }\r\n\r\n    const myStyle = {\r\n        textAlign:'center',\r\n        padding:'10px'\r\n    }\r\n    \r\n    return(\r\n        <div style={myStyle}>\r\n            <form onSubmit = {addMovie}>\r\n                <input type=\"text\" name=\"name\" value={name} onChange={updateName} />\r\n                <input type=\"text\" name=\"price\" value={price} onChange={updatePrice} />\r\n                <button>Submit</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AddMovies;","import React, { useState } from 'react';\nimport MovieList from './components/movieList'\nimport Nav from './components/Nav'\nimport {MovieProvider} from './components/movieListContext'\nimport AddMovies from './components/addMovies'\nimport './App.css';\n\nfunction App() {\n  return (\n    <MovieProvider>\n      <div>\n        <Nav />\n        <AddMovies />\n        <MovieList />\n      </div>\n    </MovieProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}